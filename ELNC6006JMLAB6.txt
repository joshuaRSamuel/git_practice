//*** Program Header ***
/***********************************************************************************************
	File Name:	TempLoggerStart.c
	Author:		
	Date:		
	Modified:	
	© Fanshawe College, 2016

	Description: This program will create and control a temperature logger sensor system. 
				Structures, arrays and ADC will be practiced and executed.
	
***********************************************************************************************/
/*
//***TODO  This is a live, in Lab, exercise.

		You must use the PIC18F45K22 datasheet in order to complete:
		OSCILLATOR MODULE:
			Section 2.2 Oscillator Control, Page 29
			Section 2.2.1 Main System Clock Selection, Page 29
			Section 2.2.2 Internal Frequency Selection, Page 29
			Section 2.5 Internal Clock Modes, Page 36
			
		Registry pages: 32,33 & 37
			
	1. Configure the registries to set the PIC18F45K22's internal oscillator to 4MHz.
			There is already a function created where the registries are identified,
			set_osc_p18f45k22_4MHz().
	2. Call the set_osc_p18f45k22_4MHz() function within initializeSystem().
	
	3. Delete these comments when complete.
*/


// Preprocessor ===================================================================

#include "pragmas.h"
#include <adc.h>
#include <stdlib.h>
#include <delays.h>
#include <stdio.h>
#include <p18f45k22.h>



// Constants ======================================================================

#define TRUE			1
#define	FALSE			0

#define LED_ON			1				// Simple way to handle the LED operation,
#define LED_OFF 		0				//	Set for the logic type and use defined
										
#define ON			1				// Simple way to handle the LED operation,
#define OFF	 		0				//	Set for the logic type and use defined

#define	PB1	PORTDbits.RD4			//pin27
#define PB2	PORTDbits.RD5			//pin28
#define PB3	PORTDbits.RD6			//pin29
#define PB4	PORTDbits.RD7			//pin30

#define LED1 PORTBbits.RB1			// pin34
#define LED2 PORTBbits.RB2			//pin35
#define LED3 PORTBbits.RB3			//pin36
										
// Global Variables ===============================================================

	
// Functions ======================================================================

/*** set_osc_p18f45k22_4MHz: ******************************************************
Author:
Date:		18 Oct, 2016		
Modified:	
Desc:		Sets the internal Oscillator of the Pic 18F45K22 to 4MHz.
Input: 		None
Returns:	None
**********************************************************************************/
void set_osc_p18f45k22_4MHz(void)
{
	//***TODO 1
	
	OSCCON =	0x52;						// Sleep on slp cmd, HFINT 4MHz, INT OSC Blk
	OSCCON2 =	0x04; 						// PLL No, CLK from OSC, MF off, Sec OSC off, Pri OSC
	OSCTUNE =	0x80; 						// PLL disabled, Default factory freq tuning
	
	while (OSCCONbits.HFIOFS != 1); 	// wait for osc to become stable
}
//eo: set_osc_p18f45k22_4MHz:: ***************************************************


/*** initializeADC: **************************************************************
Author:		CTalbot
Date:		14 Sept, 2016
Modified:	CTalbot
Desc:		Initalizes the ADC Module in the Processor to sample from A0 pin.
Input: 		None
Returns:	None
**********************************************************************************/
void initializeADC(void)
{
  TRISAbits.TRISA0= 1;			 	//config pin as input
  ANSELAbits.ANSA0 = 1; 			//disable digital buffer, set to analog

  OpenADC( 	ADC_FOSC_4 &          //config1
			ADC_RIGHT_JUST &
			ADC_12_TAD,
			ADC_CH0 &              //config2
			ADC_INT_OFF,
			ADC_REF_VDD_VDD &      //config3
			ADC_REF_VDD_VSS
                      
		);
}
//eo initializeADC:: *************************************************************
/**************************SerialConfig:******************************************
Author: JMichael
Date: 28 sept,2019
Modified: NONE
Desc: Configurationof serial port
Inputs: NONE
returns: NONE
*******************************************************************************/
/*void serialConfig(Void)
{
SPBRG1=25;
TXSTA= 0x26;
RCSTA= 0x90;
BAUDCON1= 0x40;
				//eo of serial config
}
	
***********/

/**** I/O configuration *********************************************************
Author: JMichael
Date: 19 november, 2019
Modified: NONE
Desc: configurations of ports A,B & D
Inputs: NONE
returns: NONE

********************************************************************************/

void portConfig(void){
//PORTA
ANSELA=	0x01;	//RA0 as analog
LATA= 0x00;
TRISA=	0xFF;
//PORTB
ANSELB=	0x00;	//RB1,RB2 and RB3 as digital 
LATB=0x00;
TRISB=0x00;
//PORTD
ANSELD=0x00;	//RD4,RD5,RD6 & RD7 as digital
LATD=0x00;
TRISD=0xF0;
}
//eo of portConfiguration


/*** initializeSystem: ***********************************************************
Author:		CTalbot
Date:		14 Sept, 2016

esc:		Initalizes the Temperature Logger System.
Input: 		None
Returns:	None
**********************************************************************************/
void initializeSystem(void)
{
	//***TODO 2
	set_osc_p18f45k22_4MHz();
									// Set the processor speed
	
	initializeADC();					// Prepare the ADC module of the processor

	portConfig();									

  

}	
// eo initializeSystem::**********************************************************


/*** getTemp: ********************************************************************
Author:		CTalbot
Date:		14 Sept, 2016
Modified:	None
Desc:		Reads from the ADC at A0, returns the result
Input: 		None
Returns:	int - The read ADC result
**********************************************************************************/
int getTemp(void)
{
	int result;
	
	ConvertADC();                   // Start conversion    
	while( BusyADC() );             // Wait for completion 
	result = ReadADC();             // Read result         
   
	return result;

}
// eo getTemp:: ******************************************************************



/*********************************************************************************
***** MAIN FUNCTION **************************************************************
**********************************************************************************/

void main(void)	
{
	initializeSystem();	// Function call for setting the system I/Os and enabling the ADC module
						//	Many PIC library functions are called within
						// End of the initialization portion of this code
	
	// Begin indefinite loop for program
	while(TRUE)
	{
		if(PB1 == OFF)
		{
			LED1 = LED_ON;	//Green ON
		}
		else
		{
			LED1 = LED_OFF;    //Green OFF
		}
		if(PB2 == OFF)
		{
			LED2 = LED_ON;	//RED ON
		}
		else
		{
			LED2 = LED_OFF;    //RED OFF
		}
		if(PB3 == OFF)
		{
			LED3 = LED_ON;	//yellow ON
		}
		else
		{
			LED3 = LED_OFF;    //yellow OFF
		}
		if(PB4 == OFF)
		{
			LED1 = LED_ON;
			LED2 = LED_ON;
			LED3 = LED_ON;	//yellow ON
		}
		else
		{
			LED1 = OFF;
			LED2 = OFF;
			LED3 = OFF;
		}
		//Delay10KTCYx( 5 );		// Wait 50 ms if OSC is set to 4MHz.	
	}//eo while
